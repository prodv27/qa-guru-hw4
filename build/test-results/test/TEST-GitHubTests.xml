<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="GitHubTests" tests="1" skipped="0" failures="1" errors="0" timestamp="2023-03-06T18:16:50" hostname="DESKTOP-VRG20OB" time="7.965">
  <properties/>
  <testcase name="checkExampleCodeForJUnit5()" classname="GitHubTests" time="7.965">
    <failure message="Element should have text &quot;3. Using JUnit5 extend test class1:&quot; {.markdown-body}&#13;&#10;Element: '&lt;div class=&quot;markdown-body&quot;&gt;How to soft assert using Selenide&#10;Selenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.&#10;Mechanisms:&#10;TestNG listener - com.codeborne.selenide.testng.SoftAsserts&#10;JUnit4 rule - com.codeborne.selenide.junit.SoftAsserts&#10;JUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension&#10;Example:&#10;Page with 2 elements, where 2 at invisible&#10;...&#10;  &lt;div id='first' style='display:none;'&gt;First&lt;/div&gt;&#10;  &lt;div id='second' style='display:none;'&gt;Second&lt;/div&gt;&#10;...&#10;And use code like this:&#10;public class Tests {&#10;  @Test&#10;  public void test() {&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;In normal way test fail on a first row because first item is not visible and second item will never be touched and verified.&#10;But if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.&#10;1. Using TestNG just register listener bypass annotation for test class:&#10;@Listeners({ SoftAsserts.class})&#10;public class Tests {&#10;  @Test&#10;  public void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;Don't forget to use dependency &quot;com.codeborne:selenide-testng&quot; instead of just &quot;com.codeborne:selenide&quot; to use TestNG-specific classes.&#10;2. Using JUnit4 just describe rule inside test class:&#10;public class Tests {&#10;  @Rule &#10;  public SoftAsserts softAsserts = new SoftAsserts();&#10;&#10;  @Test&#10;  public void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;Don't forget to use dependency &quot;com.codeborne:selenide-junit4&quot; instead of just &quot;com.codeborne:selenide&quot; to use JUnit4-specific classes.&#10;3. Using JUnit5 extend test class:&#10;@ExtendWith({SoftAssertsExtension.class})&#10;class Tests {&#10;  @Test&#10;  void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;Or register extension inside test class:&#10;class Tests {&#10;  @RegisterExtension &#10;  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();&#10;&#10;  @Test&#10;  void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;You can use the old good dependency &quot;com.codeborne:selenide&quot; because it contains JUnit5-specific classes.&#10;Without soft assertions you will get report:&#10;Element not found {#first}&#10;Expected: visible&#10;&#10;Screenshot: file://build/reports/tests/1536060081565.0.png&#10;Page source: file://build/reports/tests/1536060081565.0.html&#10;Timeout: 4 s.&#10;Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}&#10;With soft assertions you will get report:&#10;FAIL #1: Element not found {#first}&#10;Expected: visible&#10;Screenshot: file://build/reports/tests/1536060329615.0.png&#10;Page source: file://build/reports/tests/1536060329615.0.html&#10;Timeout: 4 s.&#10;Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}&#10;&#10;FAIL #2: Element not found {#second}&#10;Expected: visible&#10;Screenshot: file://build/reports/tests/1536060334390.1.png&#10;Page source: file://build/reports/tests/1536060334390.1.html&#10;Timeout: 4 s.&#10;Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#second&quot;}&lt;/div&gt;'&#13;&#10;Actual value: text=&quot;How to soft assert using Selenide&#10;Selenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.&#10;Mechanisms:&#10;TestNG listener - com.codeborne.selenide.testng.SoftAsserts&#10;JUnit4 rule - com.codeborne.selenide.junit.SoftAsserts&#10;JUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension&#10;Example:&#10;Page with 2 elements, where 2 at invisible&#10;...&#10;  &lt;div id='first' style='display:none;'&gt;First&lt;/div&gt;&#10;  &lt;div id='second' style='display:none;'&gt;Second&lt;/div&gt;&#10;...&#10;And use code like this:&#10;public class Tests {&#10;  @Test&#10;  public void test() {&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;In normal way test fail on a first row because first item is not visible and second item will never be touched and verified.&#10;But if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.&#10;1. Using TestNG just register listener bypass annotation for test class:&#10;@Listeners({ SoftAsserts.class})&#10;public class Tests {&#10;  @Test&#10;  public void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;Don't forget to use dependency &quot;com.codeborne:selenide-testng&quot; instead of just &quot;com.codeborne:selenide&quot; to use TestNG-specific classes.&#10;2. Using JUnit4 just describe rule inside test class:&#10;public class Tests {&#10;  @Rule &#10;  public SoftAsserts softAsserts = new SoftAsserts();&#10;&#10;  @Test&#10;  public void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;Don't forget to use dependency &quot;com.codeborne:selenide-junit4&quot; instead of just &quot;com.codeborne:selenide&quot; to use JUnit4-specific classes.&#10;3. Using JUnit5 extend test class:&#10;@ExtendWith({SoftAssertsExtension.class})&#10;class Tests {&#10;  @Test&#10;  void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;Or register extension inside test class:&#10;class Tests {&#10;  @RegisterExtension &#10;  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();&#10;&#10;  @Test&#10;  void test() {&#10;    Configuration.assertionMode = SOFT;&#10;    open(&quot;page.html&quot;);&#10;&#10;    $(&quot;#first&quot;).should(visible).click();&#10;    $(&quot;#second&quot;).should(visible).click();&#10;  }&#10;}&#10;You can use the old good dependency &quot;com.codeborne:selenide&quot; because it contains JUnit5-specific classes.&#10;Without soft assertions you will get report:&#10;Element not found {#first}&#10;Expected: visible&#10;&#10;Screenshot: file://build/reports/tests/1536060081565.0.png&#10;Page source: file://build/reports/tests/1536060081565.0.html&#10;Timeout: 4 s.&#10;Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}&#10;With soft assertions you will get report:&#10;FAIL #1: Element not found {#first}&#10;Expected: visible&#10;Screenshot: file://build/reports/tests/1536060329615.0.png&#10;Page source: file://build/reports/tests/1536060329615.0.html&#10;Timeout: 4 s.&#10;Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}&#10;&#10;FAIL #2: Element not found {#second}&#10;Expected: visible&#10;Screenshot: file://build/reports/tests/1536060334390.1.png&#10;Page source: file://build/reports/tests/1536060334390.1.html&#10;Timeout: 4 s.&#10;Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#second&quot;}&quot;&#13;&#10;Screenshot: file:/C:/Users/techn/IdeaProjects/qa_guru/qa_guru_hw4/build/reports/tests/1678126618042.0.png&#13;&#10;Page source: file:/C:/Users/techn/IdeaProjects/qa_guru/qa_guru_hw4/build/reports/tests/1678126618042.0.html&#13;&#10;Timeout: 4 s." type="com.codeborne.selenide.ex.ElementShould">Element should have text &quot;3. Using JUnit5 extend test class1:&quot; {.markdown-body}
Element: '&lt;div class=&quot;markdown-body&quot;&gt;How to soft assert using Selenide
Selenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.
Mechanisms:
TestNG listener - com.codeborne.selenide.testng.SoftAsserts
JUnit4 rule - com.codeborne.selenide.junit.SoftAsserts
JUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension
Example:
Page with 2 elements, where 2 at invisible
...
  &lt;div id='first' style='display:none;'&gt;First&lt;/div&gt;
  &lt;div id='second' style='display:none;'&gt;Second&lt;/div&gt;
...
And use code like this:
public class Tests {
  @Test
  public void test() {
    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
In normal way test fail on a first row because first item is not visible and second item will never be touched and verified.
But if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.
1. Using TestNG just register listener bypass annotation for test class:
@Listeners({ SoftAsserts.class})
public class Tests {
  @Test
  public void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
Don't forget to use dependency &quot;com.codeborne:selenide-testng&quot; instead of just &quot;com.codeborne:selenide&quot; to use TestNG-specific classes.
2. Using JUnit4 just describe rule inside test class:
public class Tests {
  @Rule 
  public SoftAsserts softAsserts = new SoftAsserts();

  @Test
  public void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
Don't forget to use dependency &quot;com.codeborne:selenide-junit4&quot; instead of just &quot;com.codeborne:selenide&quot; to use JUnit4-specific classes.
3. Using JUnit5 extend test class:
@ExtendWith({SoftAssertsExtension.class})
class Tests {
  @Test
  void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
Or register extension inside test class:
class Tests {
  @RegisterExtension 
  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();

  @Test
  void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
You can use the old good dependency &quot;com.codeborne:selenide&quot; because it contains JUnit5-specific classes.
Without soft assertions you will get report:
Element not found {#first}
Expected: visible

Screenshot: file://build/reports/tests/1536060081565.0.png
Page source: file://build/reports/tests/1536060081565.0.html
Timeout: 4 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}
With soft assertions you will get report:
FAIL #1: Element not found {#first}
Expected: visible
Screenshot: file://build/reports/tests/1536060329615.0.png
Page source: file://build/reports/tests/1536060329615.0.html
Timeout: 4 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}

FAIL #2: Element not found {#second}
Expected: visible
Screenshot: file://build/reports/tests/1536060334390.1.png
Page source: file://build/reports/tests/1536060334390.1.html
Timeout: 4 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#second&quot;}&lt;/div&gt;'
Actual value: text=&quot;How to soft assert using Selenide
Selenide provide point to perform built in verification softly - this mean that Selenide will skip failed verification and collect all of it and throw error only at the end of test.
Mechanisms:
TestNG listener - com.codeborne.selenide.testng.SoftAsserts
JUnit4 rule - com.codeborne.selenide.junit.SoftAsserts
JUnit5 extension - com.codeborne.selenide.junit5.SoftAssertsExtension
Example:
Page with 2 elements, where 2 at invisible
...
  &lt;div id='first' style='display:none;'&gt;First&lt;/div&gt;
  &lt;div id='second' style='display:none;'&gt;Second&lt;/div&gt;
...
And use code like this:
public class Tests {
  @Test
  public void test() {
    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
In normal way test fail on a first row because first item is not visible and second item will never be touched and verified.
But if you want to verify both items you can use Selenide soft assets. In this case Selenide will perform condition verification and then click on both of the items and it some item unavailable for some reason it will generate errors for each fail after test end.
1. Using TestNG just register listener bypass annotation for test class:
@Listeners({ SoftAsserts.class})
public class Tests {
  @Test
  public void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
Don't forget to use dependency &quot;com.codeborne:selenide-testng&quot; instead of just &quot;com.codeborne:selenide&quot; to use TestNG-specific classes.
2. Using JUnit4 just describe rule inside test class:
public class Tests {
  @Rule 
  public SoftAsserts softAsserts = new SoftAsserts();

  @Test
  public void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
Don't forget to use dependency &quot;com.codeborne:selenide-junit4&quot; instead of just &quot;com.codeborne:selenide&quot; to use JUnit4-specific classes.
3. Using JUnit5 extend test class:
@ExtendWith({SoftAssertsExtension.class})
class Tests {
  @Test
  void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
Or register extension inside test class:
class Tests {
  @RegisterExtension 
  static SoftAssertsExtension softAsserts = new SoftAssertsExtension();

  @Test
  void test() {
    Configuration.assertionMode = SOFT;
    open(&quot;page.html&quot;);

    $(&quot;#first&quot;).should(visible).click();
    $(&quot;#second&quot;).should(visible).click();
  }
}
You can use the old good dependency &quot;com.codeborne:selenide&quot; because it contains JUnit5-specific classes.
Without soft assertions you will get report:
Element not found {#first}
Expected: visible

Screenshot: file://build/reports/tests/1536060081565.0.png
Page source: file://build/reports/tests/1536060081565.0.html
Timeout: 4 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}
With soft assertions you will get report:
FAIL #1: Element not found {#first}
Expected: visible
Screenshot: file://build/reports/tests/1536060329615.0.png
Page source: file://build/reports/tests/1536060329615.0.html
Timeout: 4 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#first&quot;}

FAIL #2: Element not found {#second}
Expected: visible
Screenshot: file://build/reports/tests/1536060334390.1.png
Page source: file://build/reports/tests/1536060334390.1.html
Timeout: 4 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#second&quot;}&quot;
Screenshot: file:/C:/Users/techn/IdeaProjects/qa_guru/qa_guru_hw4/build/reports/tests/1678126618042.0.png
Page source: file:/C:/Users/techn/IdeaProjects/qa_guru/qa_guru_hw4/build/reports/tests/1678126618042.0.html
Timeout: 4 s.
	at app//com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:131)
	at app//com.codeborne.selenide.commands.Should.execute(Should.java:30)
	at app//com.codeborne.selenide.commands.Should.execute(Should.java:14)
	at app//com.codeborne.selenide.commands.Commands.execute(Commands.java:154)
	at app//com.codeborne.selenide.impl.SelenideElementProxy.dispatchAndRetry(SelenideElementProxy.java:131)
	at app//com.codeborne.selenide.impl.SelenideElementProxy.invoke(SelenideElementProxy.java:83)
	at app/jdk.proxy3/jdk.proxy3.$Proxy16.shouldHave(Unknown Source)
	at app//GitHubTests.checkExampleCodeForJUnit5(GitHubTests.java:33)
	at java.base@17.0.5/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.5/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.5/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.5/java.lang.reflect.Method.invoke(Method.java:568)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.5/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.5/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base@17.0.5/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.5/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.5/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.5/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Starting ChromeDriver 110.0.5481.77 (65ed616c6e8ee3fe0ad64fe83796c020644d42af-refs/branch-heads/5481@{#839}) on port 49795
Only local connections are allowed.
Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.
ChromeDriver was started successfully.
[1678126611.305][WARNING]: virtual void DevToolsClientImpl::AddListener(DevToolsEventListener *) subscribing a listener to the already connected DevToolsClient. Connection notification will not arrive.
мар. 06, 2023 10:16:51 PM org.openqa.selenium.remote.ProtocolHandshake createSession
INFO: Detected dialect: W3C
мар. 06, 2023 10:16:51 PM org.openqa.selenium.devtools.CdpVersionFinder findNearestMatch
WARNING: Unable to find an exact match for CDP version 110, so returning the closest version found: a no-op implementation
мар. 06, 2023 10:16:51 PM org.openqa.selenium.devtools.CdpVersionFinder findNearestMatch
INFO: Unable to find CDP implementation matching 110.
мар. 06, 2023 10:16:51 PM org.openqa.selenium.chromium.ChromiumDriver lambda$new$3
WARNING: Unable to find version of CDP to use for . You may need to include a dependency on a specific version of the CDP using something similar to `org.seleniumhq.selenium:selenium-devtools-v86:4.1.2` where the version ("v86") matches the version of the chromium-based browser you're using and the version number of the artifact is the same as Selenium's.
]]></system-err>
</testsuite>
